// Mocks generated by Mockito 5.4.4 from annotations
// in task_manager_maidss/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i3;
import 'package:task_manager_maidss/features/tasks/task_model.dart' as _i2;
import 'package:task_manager_maidss/services/api/task_service.dart' as _i4;
import 'package:task_manager_maidss/services/db_service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTasks_0 extends _i1.SmartFake implements _i2.Tasks {
  _FakeTasks_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodo_1 extends _i1.SmartFake implements _i2.Todo {
  _FakeTodo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_2 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskApiService extends _i1.Mock implements _i4.TaskApiService {
  MockTaskApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Tasks> fetchTasks({
    int? limit = 30,
    int? skip = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTasks,
          [],
          {
            #limit: limit,
            #skip: skip,
          },
        ),
        returnValue: _i5.Future<_i2.Tasks>.value(_FakeTasks_0(
          this,
          Invocation.method(
            #fetchTasks,
            [],
            {
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
      ) as _i5.Future<_i2.Tasks>);

  @override
  _i5.Future<_i2.Todo> addTask(String? title) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [title],
        ),
        returnValue: _i5.Future<_i2.Todo>.value(_FakeTodo_1(
          this,
          Invocation.method(
            #addTask,
            [title],
          ),
        )),
      ) as _i5.Future<_i2.Todo>);

  @override
  _i5.Future<_i2.Todo> updateTask(
    int? id,
    bool? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [
            id,
            status,
          ],
        ),
        returnValue: _i5.Future<_i2.Todo>.value(_FakeTodo_1(
          this,
          Invocation.method(
            #updateTask,
            [
              id,
              status,
            ],
          ),
        )),
      ) as _i5.Future<_i2.Todo>);

  @override
  _i5.Future<void> deleteTask(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [DbService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbService extends _i1.Mock implements _i6.DbService {
  MockDbService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i3.Database>.value(_FakeDatabase_2(
          this,
          Invocation.getter(#database),
        )),
      ) as _i5.Future<_i3.Database>);

  @override
  _i5.Future<void> insertTodo(_i2.Todo? todo) => (super.noSuchMethod(
        Invocation.method(
          #insertTodo,
          [todo],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Todo>> getAllTodos() => (super.noSuchMethod(
        Invocation.method(
          #getAllTodos,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Todo>>.value(<_i2.Todo>[]),
      ) as _i5.Future<List<_i2.Todo>>);

  @override
  _i5.Future<void> insertTodosBulk(List<_i2.Todo>? todos) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTodosBulk,
          [todos],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateTodo(_i2.Todo? todo) => (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTodo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
